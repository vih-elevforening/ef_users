<?php
/**
 * @file
 * Drupal needs this blank file.
 */

function ef_users_init() {
  if (!user_is_logged_in()) {
    return;
  }

  global $user;

  if (!_ef_users_profile_filled_in()) {
    drupal_set_message(t('Please set your contact information on your !link.', array('!link' => l(t('profile page'), 'user/' . $user->uid . '/edit-profile'))), 'status', FALSE);
  }

  if (!_ef_users_profile_picture_filled_in()) {
    drupal_set_message(t('Please set your user picture in your !link.', array('!link' => l(t('account page'), 'user/' . $user->uid . '/edit'))), 'status', FALSE);
  }
}

/**
 * Implements hook_user_insert().
 */
function ef_users_user_insert(&$edit, $account, $category) {
  _ef_users_update_commerce_customer_billing_profile($edit, $account);
}

/**
 * Implements hook_user_update().
 */
function ef_users_user_update(&$edit, $account, $category) {
  _ef_users_update_commerce_customer_billing_profile($edit, $account);
}

/**
 * Helper function to set user Commerce customer profiles.
 *
 * @param $edit
 * @param $account
 */
function _ef_users_update_commerce_customer_billing_profile($edit, $account) {
  $user_wrapper = entity_metadata_wrapper('user', $account);

  // Prevent profile creation if addressfield not filled out.
  $address = $user_wrapper->field_address;
  if (!$address->thoroughfare->value()) {
    return;
  }

  // If this is an existing user, we'll have a result
  if (!$commerce_customer_profile = _ef_users_get_customer_profile($account)) {
    $commerce_customer_profile = commerce_customer_profile_new('billing', $account->uid);
  }
  // Prepare the new address.
  $user_address = $user_wrapper->field_address->value();
  unset($user_address['element_key']);
  $user_address['first_name'] = $user_wrapper->field_name_first->value();
  $user_address['last_name'] = $user_wrapper->field_name_last->value();
  $user_address['name_line'] = $user_address['first_name'] . ' ' . $user_address['last_name'];
  $user_address += addressfield_default_values();

  $commerce_customer_profile->commerce_customer_address[LANGUAGE_NONE][0] = $user_address;
  commerce_customer_profile_save($commerce_customer_profile);
}

/**
 * Helper function to load a user's customer profile.
 *
 * @param $user
 *   Loaded user entity object (minimum of uid required)
 * @param string $type
 *   The type of profile (defaults to billing.)
 * @return object|null
 *   Returns loaded profile entity object, or null if not found.
 */
function _ef_users_get_customer_profile($user, $type = 'billing') {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_customer_profile')
    ->propertyCondition('type', $type)
    ->propertyCondition('uid', $user->uid)
    ->propertyCondition('status', 1);
  $result = $query->execute();

  if (isset($result['commerce_customer_profile'])) {
    $commerce_customer_profile = reset($result['commerce_customer_profile']);
    return commerce_customer_profile_load($commerce_customer_profile->profile_id);
  }
  else {
    return NULL;
  }
}

function _ef_users_profile_filled_in() {
  global $user;
  $user_wrapper = entity_metadata_wrapper('user', $user);

  return !(!$user_wrapper->field_name_first->value() || !$user_wrapper->field_name_last->value() || !$user_wrapper->field_address->value());
}

function _ef_users_profile_picture_filled_in() {
  global $user;
  return !empty($user->picture);
}
