<?php
/**
 * @file
 * Code for the EF Users feature.
 */

include_once 'ef_users.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function ef_users_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_menu().
 */
function ef_users_menu() {
  $items['ef-users/find-groups'] = array(
    'page callback' => '_ef_users_groups_autocomplete',
    'access callback' => true,
    'type' => MENU_CALLBACK
  );
  return $items;
}

function _ef_users_groups_autocomplete($string) {
  $matches = array();

  $query = new EntityFieldQuery();
  $return = $query
    ->entityCondition('entity_type', 'node')
    ->fieldCondition(OG_GROUP_FIELD, 'value', 1, '=')
    ->propertyCondition('title', '%' . check_plain($string) . '%', 'LIKE')
    ->range(0, 10)
    ->execute();

  foreach (array_keys($return['node']) as $gid) {
    $matches[$gid] = node_load($gid)->title;
  }
  drupal_json_output($matches);
}

/**
 * Implements hook_init().
 */
function ef_users_init() {
  if (!user_is_logged_in()) {
    return;
  }

  global $user;

  if (!_ef_users_profile_filled_in()) {
    drupal_set_message(t('Please set your contact information on your !link.', array('!link' => l(t('profile page'), 'user/' . $user->uid . '/edit-profile', array('query' => array('destination' => request_path()))))), 'status', FALSE);
  }

  if (!_ef_users_profile_picture_filled_in()) {
    drupal_set_message(t('Please set your user picture in your !link.', array('!link' => l(t('account page'), 'user/' . $user->uid . '/edit', array('query' => array('destination' => request_path()))))), 'status', FALSE);
  }
}

/**
 * Implements hook_user_insert().
 */
function ef_users_user_insert(&$edit, $account, $category) {
  _ef_users_update_commerce_customer_billing_profile($edit, $account);
}

/**
 * Implements hook_user_update().
 */
function ef_users_user_update(&$edit, $account, $category) {
  _ef_users_update_commerce_customer_billing_profile($edit, $account);
}

/**
 * Helper function to set user Commerce customer profiles.
 *
 * @param $edit
 * @param $account
 */
function _ef_users_update_commerce_customer_billing_profile($edit, $account) {
  $user_wrapper = entity_metadata_wrapper('user', $account);

  // Prevent profile creation if addressfield not filled out.
  $address = $user_wrapper->{'field_address'};
  if (!$address || !$address->thoroughfare->value()) {
    return;
  }

  // If this is an existing user, we'll have a result
  if (!$commerce_customer_profile = _ef_users_get_customer_profile($account)) {
    $commerce_customer_profile = commerce_customer_profile_new('billing', $account->uid);
  }
  // Prepare the new address.
  $user_address = $user_wrapper->field_address->value();
  unset($user_address['element_key']);
  $user_address['first_name'] = $user_wrapper->field_name_first->value();
  $user_address['last_name'] = $user_wrapper->field_name_last->value();
  $user_address['name_line'] = $user_address['first_name'] . ' ' . $user_address['last_name'];
  $user_address += addressfield_default_values();

  $commerce_customer_profile->commerce_customer_address[LANGUAGE_NONE][0] = $user_address;
  commerce_customer_profile_save($commerce_customer_profile);
}

/**
 * Helper function to load a user's customer profile.
 *
 * @param $user
 *   Loaded user entity object (minimum of uid required)
 * @param string $type
 *   The type of profile (defaults to billing.)
 * @return object|null
 *   Returns loaded profile entity object, or null if not found.
 */
function _ef_users_get_customer_profile($user, $type = 'billing') {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_customer_profile')
    ->propertyCondition('type', $type)
    ->propertyCondition('uid', $user->uid)
    ->propertyCondition('status', 1);
  $result = $query->execute();

  if (isset($result['commerce_customer_profile'])) {
    $commerce_customer_profile = reset($result['commerce_customer_profile']);
    return commerce_customer_profile_load($commerce_customer_profile->profile_id);
  }
  else {
    return NULL;
  }
}

/**
 * Check if profile is filled in
 */
function _ef_users_profile_filled_in() {
  global $user;
  /** @var EntityDrupalWrapper $user_wrapper */
  $user_wrapper = entity_metadata_wrapper('user', $user->uid);

  if (!$user_wrapper->__isset('field_name_first') || !$user_wrapper->__isset('field_name_last') || !$user_wrapper->__isset('field_address')) {
    return false;
  }

  return !(!$user_wrapper->field_name_first->value() || !$user_wrapper->field_name_last->value() || !$user_wrapper->field_address->value());
}

/**
 * Check if profile picture is filled in
 */
function _ef_users_profile_picture_filled_in() {
  global $user;
  return !empty($user->picture);
}

/**
 * Form callback for pane alerting users to join a group.
 * @param $form
 * @param $form_state
 * @return mixed
 */
function ef_users_join_group_pane_form($form, &$form_state) {
  $form['ef_user_group'] = array(
    '#title' => t('Search for a group: '),
    '#title_display' => 'invisible',
    '#type' => 'textfield',
    '#autocomplete_path' => 'ef-users/find-groups',
    '#prefix' => '<div class="container-inline">' . t('You have not joined a group yet. Go and !url, or search for one',
        array('!url' => l(t('find your class'), 'groups'))),
    '#attributes' => array(
      'style' => 'width: 150px',
    )
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Go',
    '#suffix' => '</div>',
    '#attributes' => array(
      'style' => 'margin: 0',
    ),
  );

  return $form;
}